// <auto-generated />
using System;
using Gourmand.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Gourmand.Migrations
{
    [DbContext(typeof(GourmandDBContext))]
    [Migration("20240423155235_INIT")]
    partial class INIT
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Gourmand.Models.Basket", b =>
                {
                    b.Property<int>("BasketID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BasketID"));

                    b.Property<int?>("OrderID")
                        .HasColumnType("int");

                    b.Property<int?>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("BasketID");

                    b.HasIndex("OrderID");

                    b.HasIndex("ProductID");

                    b.ToTable("Basket");
                });

            modelBuilder.Entity("Gourmand.Models.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryID");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Gourmand.Models.Client", b =>
                {
                    b.Property<int>("ClientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("RegistrationDate")
                        .HasColumnType("date");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClientID");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("Gourmand.Models.Courier", b =>
                {
                    b.Property<int>("CourierID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourierID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("RegistrationDate")
                        .HasColumnType("date");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CourierID");

                    b.ToTable("Courier");
                });

            modelBuilder.Entity("Gourmand.Models.Menu", b =>
                {
                    b.Property<int>("MenuID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MenuID"));

                    b.Property<int?>("ProductID")
                        .HasColumnType("int");

                    b.Property<int?>("RestaurantID")
                        .HasColumnType("int");

                    b.HasKey("MenuID");

                    b.HasIndex("ProductID");

                    b.HasIndex("RestaurantID");

                    b.ToTable("Menu");
                });

            modelBuilder.Entity("Gourmand.Models.Order", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ClientID")
                        .HasColumnType("int");

                    b.Property<int?>("CourierID")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RestaurantID")
                        .HasColumnType("int");

                    b.HasKey("OrderID");

                    b.HasIndex("ClientID");

                    b.HasIndex("CourierID");

                    b.HasIndex("RestaurantID");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Gourmand.Models.Product", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductID"));

                    b.Property<int?>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("ProductID");

                    b.HasIndex("CategoryID");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("Gourmand.Models.Restaurant", b =>
                {
                    b.Property<int>("RestaurantID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RestaurantID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("RegistrationDate")
                        .HasColumnType("date");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RestaurantID");

                    b.ToTable("Restaurant");
                });

            modelBuilder.Entity("Gourmand.Models.Basket", b =>
                {
                    b.HasOne("Gourmand.Models.Order", null)
                        .WithMany("Basket")
                        .HasForeignKey("OrderID");

                    b.HasOne("Gourmand.Models.Product", null)
                        .WithMany("Basket")
                        .HasForeignKey("ProductID");
                });

            modelBuilder.Entity("Gourmand.Models.Menu", b =>
                {
                    b.HasOne("Gourmand.Models.Product", null)
                        .WithMany("Menu")
                        .HasForeignKey("ProductID");

                    b.HasOne("Gourmand.Models.Restaurant", null)
                        .WithMany("Menu")
                        .HasForeignKey("RestaurantID");
                });

            modelBuilder.Entity("Gourmand.Models.Order", b =>
                {
                    b.HasOne("Gourmand.Models.Client", null)
                        .WithMany("Order")
                        .HasForeignKey("ClientID");

                    b.HasOne("Gourmand.Models.Courier", null)
                        .WithMany("Order")
                        .HasForeignKey("CourierID");

                    b.HasOne("Gourmand.Models.Restaurant", null)
                        .WithMany("Order")
                        .HasForeignKey("RestaurantID");
                });

            modelBuilder.Entity("Gourmand.Models.Product", b =>
                {
                    b.HasOne("Gourmand.Models.Category", null)
                        .WithMany("Product")
                        .HasForeignKey("CategoryID");
                });

            modelBuilder.Entity("Gourmand.Models.Category", b =>
                {
                    b.Navigation("Product");
                });

            modelBuilder.Entity("Gourmand.Models.Client", b =>
                {
                    b.Navigation("Order");
                });

            modelBuilder.Entity("Gourmand.Models.Courier", b =>
                {
                    b.Navigation("Order");
                });

            modelBuilder.Entity("Gourmand.Models.Order", b =>
                {
                    b.Navigation("Basket");
                });

            modelBuilder.Entity("Gourmand.Models.Product", b =>
                {
                    b.Navigation("Basket");

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("Gourmand.Models.Restaurant", b =>
                {
                    b.Navigation("Menu");

                    b.Navigation("Order");
                });
#pragma warning restore 612, 618
        }
    }
}
